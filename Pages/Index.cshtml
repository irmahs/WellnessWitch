@page
@model WellnessWitch.Pages.IndexModel
@{
    ViewData["Title"] = "Wellness Witch";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />

<div class="container py-5">
    <h1 class="text-center mb-4">Wellness Witch</h1>

    <div class="row mb-5">
        <div class="col-md-6">
            <h3>Base Ingredients</h3>
            @foreach (var group in Model.BaseIngredientsByType)
            {
                <div class="mb-2">
                    <strong>@group.Key</strong>
                    <div class="btn-group d-flex flex-wrap" role="group">
                        @foreach (var ingredient in group.Value)
                        {
                            <button type="button" class="btn btn-outline-primary m-1 base-btn" 
                                    data-type="@ingredient.Type" data-id="@ingredient.Id" data-name="@ingredient.Name">
                                @ingredient.Name
                            </button>
                        }
                    </div>
                </div>
            }
        </div>
        <div class="col-md-6">
            <h3>Topping Ingredients</h3>
            @foreach (var group in Model.ToppingIngredientsByType)
            {
                <div class="mb-2">
                    <strong>@group.Key</strong>
                    <div class="btn-group d-flex flex-wrap" role="group">
                        @foreach (var ingredient in group.Value)
                        {
                            <button type="button" class="btn btn-outline-success m-1 topping-btn" 
                                    data-type="@ingredient.Type" data-id="@ingredient.Id" data-name="@ingredient.Name">
                                @ingredient.Name
                            </button>
                        }
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="text-center">
        <button id="brewBtn" class="btn btn-lg btn-dark" disabled>Brew</button>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="resultModal" tabindex="-1" aria-labelledby="resultModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="resultModalLabel">Result</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="resultModalBody">
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
    let selectedBases = [];
    let selectedBaseTypes = [];
    let selectedToppings = [];
    let selectedToppingTypes = [];
    const baseBtns = document.querySelectorAll('.base-btn');
    const toppingBtns = document.querySelectorAll('.topping-btn');
    const brewBtn = document.getElementById('brewBtn');
    let recipes = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Recipes));

    function updateBaseButtons() {
        baseBtns.forEach(btn => {
            const id = btn.getAttribute('data-id');
            if (selectedBases.includes(id)) {
                btn.classList.add('active');
            } else {
                btn.classList.remove('active');
            }
        });
    }

    function updateToppingButtons() {
        toppingBtns.forEach(btn => {
            const id = btn.getAttribute('data-id');
            if (selectedToppings.includes(id)) {
                btn.classList.add('active');
            } else {
                btn.classList.remove('active');
            }
        });
    }

    function updateBrewBtn() {
        brewBtn.disabled = !(selectedBases.length === 2 && selectedToppings.length === 2);
    }

    baseBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            const id = btn.getAttribute('data-id');
            const type = btn.getAttribute('data-type');
            // If already selected a base of this type, do nothing
            if (selectedBases.includes(id)) {
                return;
            }
            if (selectedBaseTypes.includes(type)) {
                const idx = selectedBaseTypes.indexOf(type);
                selectedBases[idx] = id;
            } else if (selectedBases.length < 2) {
                selectedBases.push(id);
                selectedBaseTypes.push(type);
            }
            updateBaseButtons();
            updateBrewBtn();
        });
    });

    toppingBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            const id = btn.getAttribute('data-id');
            const type = btn.getAttribute('data-type');
            // If already selected a topping of this type, do nothing
            if (selectedToppings.includes(id)) {
                return;
            }
            if (selectedToppingTypes.includes(type)) {
                const idx = selectedToppingTypes.indexOf(type);
                selectedToppings[idx] = id;
            } else if (selectedToppings.length < 2) {
                selectedToppings.push(id);
                selectedToppingTypes.push(type);
            }
            updateToppingButtons();
            updateBrewBtn();
        });
    });

    brewBtn.addEventListener('click', function() {
        // Find recipe match
        let match = recipes.find(r => {
            let baseIds = r.BaseIngredients.map(i => i.Id.toString()).sort();
            let toppingIds = r.ToppingIngredients.map(i => i.Id.toString()).sort();
            return (
                JSON.stringify(baseIds) === JSON.stringify([...selectedBases].sort()) &&
                JSON.stringify(toppingIds) === JSON.stringify([...selectedToppings].sort())
            );
        });
        let modal = new bootstrap.Modal(document.getElementById('resultModal'));
        let body = document.getElementById('resultModalBody');
        if (match) {
            body.innerHTML = `<h4 class='text-success'>${match.Name}</h4>`;
        } else {
            body.innerHTML = `<h4 class='text-warning'>Mystery Wellness</h4>`;
        }
        modal.show();
        // Reset selections after brewing
        selectedBases = [];
        selectedBaseTypes = [];
        selectedToppings = [];
        selectedToppingTypes = [];
        updateBaseButtons();
        updateToppingButtons();
        updateBrewBtn();
    });

    // Initial state
    updateBaseButtons();
    updateToppingButtons();
    updateBrewBtn();
</script>
